/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo, useState, forwardRef } from "react";
import { useGLTF } from "@react-three/drei";
import model from "./hologram.glb";
import { useFrame, useThree } from "@react-three/fiber";
import { useGesture, useDrag } from "react-use-gesture";
import { useBox, Debug, useCompoundBody } from "@react-three/cannon";
import Model from "./SmallerLogo";
import * as THREE from "three";
import { meshBounds } from "@react-three/drei";
import {SimpleGeometry} from './SimpleBox';
import {HologramBoxes} from "../settings/Boxes"

function Swarm({ count }) {
  const mesh = useRef();
  const light = useRef();

  const { size, viewport } = useThree();
  const aspect = size.width / viewport.width;
  let newY = 0;
  const dummy = useMemo(() => new THREE.Object3D(), []);
  // Generate some random positions, speed factors and timings
  const particles = useMemo(() => {
    const temp = [];
    for (let i = 0; i < count; i++) {
      const t = Math.random() * 100;
      const factor = 20 + Math.random() * 100;
      const speed = 0.01 + Math.random() / 200;
      const xFactor = -0.5 + Math.random();
      const yFactor = 0.7 + Math.random();
      const zFactor = -0.3 + Math.random();
      temp.push({ t, factor, speed, xFactor, yFactor, zFactor });
    }
    return temp;
  }, [count]);
  // The innards of this hook will run every frame
  useFrame((state) => {
    // Makes the light follow the mouse

    // Run through the randomized data to calculate some movement
    particles.forEach((particle, i) => {
      let { t, factor, speed, xFactor, yFactor, zFactor } = particle;
      // There is no sense or reason to any of this, just messing around with trigonometric functions
      t = particle.t += speed / 2;

      const s = Math.cos(t);
      const b = Math.sin(t) + Math.cos(t * 2) / 25;

      // Update the dummy object
      dummy.position.set(xFactor, yFactor + b, zFactor);
      dummy.scale.set(s, s, s);
      dummy.rotation.set(s * 3, s * 3, s * 3);
      dummy.updateMatrix();
      // And apply the matrix to the instanced item
      mesh.current.setMatrixAt(i, dummy.matrix);
    });
    mesh.current.instanceMatrix.needsUpdate = true;
  });
  return (
    <>
      <instancedMesh ref={mesh} args={[null, null, count]}>
        <dodecahedronBufferGeometry attach="geometry" args={[0.2, 0]} />
        <meshPhongMaterial
          attach="material"
          color="#065b8d"
          opacity={0.5}
          transparent
        />
      </instancedMesh>
    </>
  );
}

export default function Hologram(props){
  const { nodes, materials } = useGLTF(model);
  const box = useRef();
  const position = useRef([0, 0, 0]);
  const rot = useRef([0, 0, 0]);
  var boxes = HologramBoxes;
  const [ref, api] = useCompoundBody(() => ({
    mass: 1,
    position: props.positionOfObj,
    rotation: props.rotationOfObj,
    shapes: boxes,
  }));
  useEffect(() => {
    const unsubscribe = api.position.subscribe((v) => (position.current = v));
    return unsubscribe;
  }, []);
  useEffect(() => {
    const unsubscribe = api.rotation.subscribe((v) => (rot.current = v));
    return unsubscribe;
  }, []);
  const [dragging, setDrag] = useState(false);
  const [lastPos, setLastPos] = useState([0,0])
  
  useFrame(() => {
    
    if (dragging === false) {
      box.current.position.set(
        position.current[0],
        position.current[1],
        position.current[2]
      ); //this isnt the problem
      box.current.rotation.set(rot.current[0], rot.current[1], rot.current[2]); 
      setLastPos([position.current[0], position.current[1]])
      api.wakeUp();
    }  if(dragging === true) {
      
      api.sleep();
      api.position.copy(box.current.position);
      api.rotation.copy(box.current.rotation);

    }
  });
  function handleChange(newValue) {
    setDrag(newValue);
  }
  return (
    <>
        <SimpleGeometry
    ref={box}
    colliders={boxes}
    positionCol={props.positionOfObj}
    rotationCol={props.positionOfObj}
    setDrag={handleChange}
    lastPos={lastPos}
  />
 <group ref={ref} {...props} dispose={null}>
        <mesh geometry={nodes.Sphere.geometry}raycast={meshBounds} material={materials.legs} />
        <Model position={[0,2,0]}/>
        <spotLight
          color={"#03fcec"}
          power={100}
          distance={10}
          angle={Math.PI / 6}
  
          castShadow

        />
        <Swarm count={10} />
      </group>
      <group >
      <Model  scale={0.3}/>
      </group>

    </>
  );
}
useGLTF.preload(model);
