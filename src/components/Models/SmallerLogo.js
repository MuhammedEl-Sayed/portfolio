/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef , useEffect} from 'react'
import { useGLTF } from '@react-three/drei'
import model from "./smallerLogo.glb";
import * as THREE from "three";
import styled from "styled-components";
import { Canvas, MeshProps, useFrame, useThree } from "@react-three/fiber";
import { MathUtils } from "three";
import { meshBounds } from "@react-three/drei";
import {SimpleBox} from './SimpleBox';
export default function Model(props) {
  const { nodes, materials } = useGLTF(model);
  let decrease = false;

  const mesh = useRef();

  useFrame((state, delta) => {
    let progress = 0;

    if (mesh.current.position.y >= 3.7) {
      decrease = true;
      progress = 0;
    } else if (mesh.current.position.y <=3) {
      decrease = false;
      progress = 0;
    }
    if (decrease) {
      progress += 0.0008;
      mesh.current.position.y = MathUtils.lerp(
        mesh.current.position.y,
        2,
        progress
      );
    } else {
      progress += 0.002;
      mesh.current.position.y = MathUtils.lerp(
        mesh.current.position.y,
        4,
        progress
      );
    }
  });

  return (
    <group>
    <group ref={mesh} {...props} dispose={null}>
      <mesh
        geometry={nodes.Cube001.geometry}
        material={materials["Material.001"]}
        position={[0, 0, 0.3]}
        rotation={[0.5, -0.8, 0]}
        scale={2.5}
        castShadow
        raycast={meshBounds}
      />
    </group>
    </group>
  );
}

useGLTF.preload(model)
