/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState, forwardRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { SimpleGeometry } from "./SimpleBox";
import {useBox, Debug, useTrimesh, useCompoundBody, useConvexPolyhedron} from "@react-three/cannon"
import { Canvas, useFrame, useThree, } from "@react-three/fiber";
import { PlainImages } from "../settings/Boxes";

import { meshBounds, Center } from "@react-three/drei";
import model from './trowel.glb'



export default function Trowel(props){
  const { nodes, materials } = useGLTF(model);
  const box = useRef();
  const position = useRef([0, 0, 0]);
  const rot = useRef([0, 0, 0]);
  var boxes = PlainImages;
  const [ref, api] = useCompoundBody(() => ({
    mass: 1,
    position: props.positionOfObj,
    rotation: props.rotationOfObj,
    shapes: boxes,
  }));
  useEffect(() => {
    const unsubscribe = api.position.subscribe((v) => (position.current = v));
    return unsubscribe;
  }, []);
  useEffect(() => {
    const unsubscribe = api.rotation.subscribe((v) => (rot.current = v));
    return unsubscribe;
  }, []);
  const [dragging, setDrag] = useState(false);
  const [lastPos, setLastPos] = useState([0,0])
  
  useFrame(() => {
    
    if (dragging === false) {
      box.current.position.set(
        position.current[0],
        position.current[1],
        position.current[2]
      ); //this isnt the problem
      box.current.rotation.set(rot.current[0], rot.current[1], rot.current[2]); 
      setLastPos([position.current[0], position.current[1]])
      api.wakeUp();
    }  if(dragging === true) {
      
      api.sleep();
      api.position.copy(box.current.position);
      api.rotation.copy(box.current.rotation);

    }
  });
  function handleChange(newValue) {
    setDrag(newValue);
  }
  return (
    <>
    <SimpleGeometry
    ref={box}
    colliders={boxes}
    positionCol={props.positionOfObj}
    rotationCol={props.positionOfObj}
    setDrag={handleChange}
    lastPos={lastPos}
  />
    <group ref={ref} {...props} dispose={null}>
      <mesh geometry={nodes.Untitled.geometry} material={materials.Untitled} rotation={[Math.PI/2, 0, 0]}scale={[3,1,3]}position={[0.08, 0, -0.2]} />
    </group>

    </>
  );
}
useGLTF.preload(model)
