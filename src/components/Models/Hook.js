/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import model from "./hook.glb"
import { useBox, Debug, useCompoundBody } from "@react-three/cannon";

export default function Hook(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF(model)
  const [ref, api] = useCompoundBody(() => ({
    mass: 0,
    ...props,
    rotation: [0, Math.PI, 0],
    
    shapes: [

      { type: "Cylinder", position: [0, 0,1], args: [0.13, 0.13, 1], rotation:[Math.PI/2,0,0] },
      { type: "Cylinder", position: [0, 0.16,0.3], args: [0.13, 0.13, 0.5], rotation:[-Math.PI/5,0,0] },
      { type: "Sphere", position: [0, 0.55,0.05], args: [0.15, 4, 4], rotation:[-Math.PI/4,0,0] },
    ],
  }));

  return (
    <group ref={ref} {...props} dispose={null} rotation={[0,Math.PI,0]} scale={0.3}>
      <mesh
        geometry={nodes.Cylinder001.geometry}
        material={materials.hook}
        position={[0, 0.05, 3.46]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.4, 1.5, 0.4]}
        castShadow
        receiveShadow
      />
    </group>
  )
}

useGLTF.preload(model)
