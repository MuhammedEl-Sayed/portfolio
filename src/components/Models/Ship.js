/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState, forwardRef  } from 'react'
import { useGLTF } from '@react-three/drei'
import model from './ship.glb'
import {useBox, Debug, useTrimesh, useCompoundBody} from "@react-three/cannon"
import { Canvas, useFrame, useThree, } from "@react-three/fiber";
import { ShipBoxes } from "../settings/Boxes";
import { SimpleGeometry } from "./SimpleBox";


export default function  Ship(props){
  const { nodes, materials } = useGLTF(model);
  const box = useRef();
  const position = useRef([0, 0, 0]);
  const rot = useRef([0, 0, 0]);
  var boxes = ShipBoxes;
  const [ref, api] = useCompoundBody(() => ({
    mass: 1,
    position: props.positionOfObj,
    rotation: props.rotationOfObj,
    shapes: boxes,
  }));
  useEffect(() => {
    const unsubscribe = api.position.subscribe((v) => (position.current = v));
    return unsubscribe;
  }, []);
  useEffect(() => {
    const unsubscribe = api.rotation.subscribe((v) => (rot.current = v));
    return unsubscribe;
  }, []);
  const [dragging, setDrag] = useState(false);
  const [lastPos, setLastPos] = useState([0,0])
  
  useFrame(() => {
    
    if (dragging === false) {
      box.current.position.set(
        position.current[0],
        position.current[1],
        position.current[2]
      ); //this isnt the problem
      box.current.rotation.set(rot.current[0], rot.current[1], rot.current[2]); 
      setLastPos([position.current[0], position.current[1]])
      api.wakeUp();
    }  if(dragging === true) {
      
      api.sleep();
      api.position.copy(box.current.position);
      api.rotation.copy(box.current.rotation);

    }
  });
  function handleChange(newValue) {
    setDrag(newValue);
  }
  return (
    <>
        <SimpleGeometry
    ref={box}
    colliders={boxes}
    positionCol={props.positionOfObj}
    rotationCol={props.positionOfObj}
    setDrag={handleChange}
    lastPos={lastPos}
  />
    <group ref={ref} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.15}>
        <mesh geometry={nodes.Mesh_0_1.geometry} material={materials.M_Catherine} />
        <mesh geometry={nodes.Mesh_0_2.geometry} material={materials['M_Fabric-Sails']} />
        <mesh geometry={nodes.Mesh_0_3.geometry} material={materials.M_WoodCeiling} />
        <mesh geometry={nodes.Mesh_0_4.geometry} material={materials.M_Glass} />
        <mesh geometry={nodes.Mesh_0_5.geometry} material={materials.M_Metal_02} />
        <mesh geometry={nodes.Mesh_0_6.geometry} material={materials['M_WoodPainted-Red']} />
        <mesh geometry={nodes.Mesh_0_7.geometry} material={materials['M_WoodPainted-Yellow']} />
        <mesh geometry={nodes.Mesh_0_8.geometry} material={materials['M_WoodPainted-Black']} />
        <mesh geometry={nodes.Mesh_0_9.geometry} material={materials.M_ManilaRope} />
        <mesh geometry={nodes.Mesh_0_10.geometry} material={materials.M_Metal_01} />
        <mesh geometry={nodes.Mesh_0_11.geometry} material={materials['M_Wood-Floor']} />
        <mesh geometry={nodes.Mesh_0_12.geometry} material={materials['M_WoodPainted-White']} />
        <mesh geometry={nodes.Mesh_0_13.geometry} material={materials.M_Wood_01} />
        <mesh geometry={nodes.Mesh_0_14.geometry} material={materials.M_Wood_02} />
        <mesh geometry={nodes.Mesh_0_15.geometry} material={materials.Material} />
      </group>
    </group>

    </>
  );
}
useGLTF.preload(model)
