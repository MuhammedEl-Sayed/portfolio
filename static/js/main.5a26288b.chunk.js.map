{"version":3,"sources":["components/unityLogo.gltf","components/UnityLogo.js","components/GeneralStyles.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useGLTF","preload","model","GridContainer","styled","div","GridItem1","GridItem2","FlexboxContainer","SubText","h2","ScrollContainer","scroll","children","viewport","useThree","group","useRef","vec","THREE","useFrame","current","position","lerp","set","height","ref","Thing","props","process","nodes","materials","useState","hover","setHover","castShadow","dispose","onClick","e","geometry","Cube","material","rotation","App","scrollRef","text","effect","iterations","Loader","className","onCreated","state","events","connect","PerspectiveCamera","makeDefault","fov","fallback","onScroll","target","scrollTop","scrollHeight","style","pointerEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAAe,G,MAAA,IAA0B,wC,eCyDzCA,IAAQC,QAAQC,G,8CCrDHC,EAAgBC,IAAOC,IAAV,qFAMbC,EAAYF,IAAOC,IAAV,mEAMTE,EAAYH,IAAOC,IAAV,sEAKTG,EAAmBJ,IAAOC,IAAV,uOAYhBI,EAAUL,IAAOM,GAAV,kD,QCpBpB,SAASC,EAAT,GAAqD,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,SACzBC,EAAaC,cAAbD,SACJE,EAAa,KACjBA,EAAQC,mBACR,IAAMC,EAAM,IAAIC,UAEhB,OADAC,aAAS,kBAAMJ,EAAMK,QAAQC,SAASC,KAAKL,EAAIM,IAAI,EAAGV,EAASW,OAASb,EAAOS,QAAU,EAAMP,EAASW,OAAU,GAAI,OAC/G,uBAAOC,IAAKV,EAAZ,SAAoBH,IAoB5B,SAASc,EAAMC,GACd,MAAkC5B,YAAQ6B,6BAAlCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAGTf,EAAQC,mBACd,EAA0Be,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,OACE,+CAAOC,YAAU,EAACT,IAAKV,GAAWY,GAAlC,IAAyCQ,QAAS,KAAlD,SAEE,sBACED,YAAU,EACVE,QAAS,SAACC,GAAD,OAAOJ,GAAUD,IAC1BM,SAAUT,EAAMU,KAAKD,SACrBE,SAAUV,EAAU,gBACpBT,SAAU,CAAC,EAAG,EAAG,IACjBoB,SAAU,EAAE,IAAM,GAAK,QA6DhBC,MA7Cf,WACE,IAAMC,EAAY3B,iBAAO,MACnBL,EAASK,iBAAO,GAEtB,OACE,qCAIE,eAACd,EAAD,WACE,cAACG,EAAD,UACE,eAACE,EAAD,WACE,cAAC,OAAD,CAAMqC,KAAK,oBAAoBC,OAAO,iBAAiBC,WAAY,IACnE,cAACtC,EAAD,uDAKJ,eAACF,EAAD,WACA,cAACyC,EAAA,EAAD,IACE,eAAC,IAAD,CAAQC,UAAU,aAAaC,UAAW,SAACC,GAAD,OAAgBA,EAAMC,OAAOC,QAAQT,EAAUvB,UAAzF,UACE,cAACiC,EAAA,EAAD,CAAmBC,aAAW,EAACC,IAAK,GAAIlC,SAAU,CAAC,EAAG,GAAI,IAAKoB,SAAU,EAAE,GAAK,EAAG,KACnF,cAAC,WAAD,CAAUe,SAAU,KAApB,SAEE,cAAC9C,EAAD,CAAiBC,OAAQA,EAAzB,SAEE,cAACe,EAAD,iBAWV,qBAAKD,IAAKkB,EAAWc,SAlCR,SAACpB,GAAD,OAAa1B,EAAOS,QAAUiB,EAAEqB,OAAOC,UAAYtB,EAAEqB,OAAOE,cAkChCZ,UAAU,SAAnD,SACE,qBAAKa,MAAO,CAAErC,OAAO,QAAUsC,cAAe,gBC9FvCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5a26288b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/unityLogo.ce3ee7a0.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport model from \"./unityLogo.gltf\";\nimport styled from \"styled-components\";\n\nimport { useGLTF } from \"@react-three/drei\";\n\nfunction TurnLightsOn(color) {\n  const ref = useRef();\n  return (\n    <group ref={ref}>\n      <spotLight position={[0, 15, 0]} angle={Math.PI / 3} penumbra={1} color={'#0000FF'} />\n      <spotLight\n        position={[4, -3, 0]}\n        color={'#FF0000'}\n        angle={Math.PI / 3}\n        penumbra={1}\n        rotation={[45, 0, 0]}\n      />\n      <spotLight\n      color={'#00FF00'}\n        position={[-4, -3, 0]}\n        angle={Math.PI / 3}\n        penumbra={1}\n        rotation={[45, 0, 0]}\n      />\n    </group>\n  );\n}\n\n\nexport default function Model(props) {\n  const { nodes, materials } = useGLTF(model);\n  \n  //const [group] = useBox(() => ({ mass: 4, ...props }))\n  const group = useRef();\n  const [hover, setHover] = useState(false);\n  return (\n    <group castShadow ref={group} {...props} dispose={null}>\n      \n      <mesh\n        castShadow\n        onClick={(e) => setHover(!hover)}\n        geometry={nodes.Cube.geometry}\n        material={materials[\"Material.001\"]}\n        position={[0, 0, 0.3]}\n        rotation={[-0.1, -0.8, 0]}\n      />\n\n    </group>\n  );\n}\n\nuseGLTF.preload(model);","import styled from \"styled-components\";\r\nimport React from \"react\";\r\nimport { Html } from \"@react-three/drei\";\r\n\r\nexport const GridContainer = styled.div`\r\n    display: grid;\r\n    width: 100%;\r\n    height: 100%;\r\n`\r\n\r\nexport const GridItem1 = styled.div`\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n`\r\n\r\n\r\nexport const GridItem2 = styled.div`\r\n    grid-column: 1;\r\n    grid-row: 1/ 2;\r\n`\r\n\r\nexport const FlexboxContainer = styled.div `\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    align-items: center;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    justify-content: center;\r\n    font-family: Mont;\r\n    font-size: 5rem;\r\n`\r\n\r\nexport const SubText = styled.h2`\r\n    font-size: 2rem;\r\n`\r\n","import React, { Suspense, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, MeshProps, useFrame, useThree, } from \"@react-three/fiber\";\nimport \"./App.css\";\nimport Model from \"./components/UnityLogo.js\";\nimport { Html, Loader, OrbitControls, PerspectiveCamera, Preload, useGLTF } from \"@react-three/drei\";\nimport { FlexboxContainer, GridContainer, GridItem1, GridItem2, SubText } from \"./components/GeneralStyles\";\n// @ts-ignore\nimport { Wave } from 'react-animated-text';\n\n\n\n\nfunction ScrollContainer({ scroll, children }: any) {\n  const { viewport } = useThree();\n  let group: any = null;\n  group = useRef();\n  const vec = new THREE.Vector3();\n  useFrame(() => group.current.position.lerp(vec.set(0, viewport.height * scroll.current * 5 - ((viewport.height)), 0), 0.1))\n  return <group ref={group}>{children}</group>\n}\n\n\nfunction Plane(props: MeshProps) {\n  const ref = useRef();\n  const [hover, setHover] = useState(false)\n\n  return (\n    <mesh ref={ref} receiveShadow rotation={[-90, 0, 0]} position={[0, -3, 0]}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n\n      <planeBufferGeometry attach=\"geometry\" args={[50, 50]} />\n      <meshStandardMaterial attach=\"material\" color='#a9a9a9' />\n\n    </mesh>\n  )\n}\n\n function Thing(props: any) {\n  const { nodes, materials }: any = useGLTF(process.env.PUBLIC_URL + \"/unityLogo.gltf\");\n  \n  //const [group] = useBox(() => ({ mass: 4, ...props }))\n  const group = useRef();\n  const [hover, setHover] = useState(false);\n  return (\n    <group castShadow ref={group} {...props} dispose={null}>\n      \n      <mesh\n        castShadow\n        onClick={(e) => setHover(!hover)}\n        geometry={nodes.Cube.geometry}\n        material={materials[\"Material.001\"]}\n        position={[0, 0, 0.3]}\n        rotation={[-0.1, -0.8, 0]}\n      />\n\n    </group>\n  );\n}\nfunction Scene() {\n  const viewport = useThree((state) => state.viewport)\n  return (\n    <>\n      <Model position={[0, -viewport.height, 0]} />\n      <Model position={[0, -viewport.height * 2, 0]} />\n    </>\n  )\n}\n\nfunction App() {\n  const scrollRef = useRef(null)\n  const scroll = useRef(0)\n  const doScroll = (e: any) => (scroll.current = e.target.scrollTop / e.target.scrollHeight)\n  return (\n    <>\n\n\n\n      <GridContainer >\n        <GridItem1>\n          <FlexboxContainer>\n            <Wave text=\"Muhammed El-Sayed\" effect=\"verticalFadeIn\" iterations={1} />\n            <SubText>  Multi-Media Application Developer</SubText>\n          </FlexboxContainer>\n\n        </GridItem1>\n\n        <GridItem2>\n        <Loader/>\n          <Canvas className=\"grid-item2\" onCreated={(state: any) => state.events.connect(scrollRef.current)} >\n            <PerspectiveCamera makeDefault fov={60} position={[0, 15, 20]} rotation={[-0.7, 0, 0]} />\n            <Suspense fallback={null}>\n\n              <ScrollContainer scroll={scroll}>\n             \n                <Thing />\n               \n              </ScrollContainer>\n            </Suspense>\n          </Canvas>\n  \n        </GridItem2>\n       \n\n      </GridContainer>\n     \n      <div ref={scrollRef} onScroll={doScroll} className=\"scroll\">\n        <div style={{ height: `100vh`, pointerEvents: 'none' }}></div>\n      </div>\n  \n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}