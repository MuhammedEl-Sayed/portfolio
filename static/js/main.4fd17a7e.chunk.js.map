{"version":3,"sources":["components/GeneralStyles.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GridContainer","styled","div","GridItem1","GridItem2","FlexboxContainer","SubText","h2","ScrollContainer","scroll","children","viewport","useThree","group","useRef","vec","THREE","useFrame","current","position","lerp","set","height","ref","TurnLightsOn","color","angle","Math","PI","penumbra","rotation","Model","props","useGLTF","nodes","materials","useState","hover","setHover","castShadow","dispose","onClick","e","geometry","Cube","material","App","scrollRef","text","effect","iterations","className","onCreated","state","events","connect","PerspectiveCamera","makeDefault","fov","fallback","Html","Loader","onScroll","target","scrollTop","scrollHeight","style","pointerEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fd17a7e.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport React from \"react\";\r\nimport { Html } from \"@react-three/drei\";\r\n\r\nexport const GridContainer = styled.div`\r\n    display: grid;\r\n    width: 100%;\r\n    height: 100%;\r\n`\r\n\r\nexport const GridItem1 = styled.div`\r\n    grid-column: 1;\r\n    grid-row: 1;\r\n`\r\n\r\n\r\nexport const GridItem2 = styled.div`\r\n    grid-column: 1;\r\n    grid-row: 1/ 2;\r\n`\r\n\r\nexport const FlexboxContainer = styled.div `\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    align-items: center;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    justify-content: center;\r\n    font-family: Mont;\r\n    font-size: 5rem;\r\n`\r\n\r\nexport const SubText = styled.h2`\r\n    font-size: 2rem;\r\n`\r\n","import React, { Suspense, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, MeshProps, useFrame, useThree, } from \"@react-three/fiber\";\nimport \"./App.css\";\n\nimport { Html, Loader, OrbitControls, PerspectiveCamera, Preload, useGLTF } from \"@react-three/drei\";\nimport { FlexboxContainer, GridContainer, GridItem1, GridItem2, SubText } from \"./components/GeneralStyles\";\n// @ts-ignore\nimport { Wave } from 'react-animated-text';\n\n\n\nfunction ScrollContainer({ scroll, children }: any) {\n  const { viewport } = useThree();\n  let group: any = null;\n  group = useRef();\n  const vec = new THREE.Vector3();\n  useFrame(() => group.current.position.lerp(vec.set(0, viewport.height * scroll.current * 5 - ((viewport.height)), 0), 0.1))\n  return <group ref={group}>{children}</group>\n}\n\n\nfunction Plane(props: MeshProps) {\n  const ref = useRef();\n  const [hover, setHover] = useState(false)\n\n  return (\n    <mesh ref={ref} receiveShadow rotation={[-90, 0, 0]} position={[0, -3, 0]}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n\n      <planeBufferGeometry attach=\"geometry\" args={[50, 50]} />\n      <meshStandardMaterial attach=\"material\" color='#a9a9a9' />\n\n    </mesh>\n  )\n}\n\nfunction TurnLightsOn(color: any) {\n  const ref = useRef();\n  return (\n    <group ref={ref}>\n      <spotLight position={[0, 15, 0]} angle={Math.PI / 3} penumbra={1} color={'#0000FF'} />\n      <spotLight\n        position={[4, -3, 0]}\n        color={'#FF0000'}\n        angle={Math.PI / 3}\n        penumbra={1}\n        rotation={[45, 0, 0]}\n      />\n      <spotLight\n      color={'#00FF00'}\n        position={[-4, -3, 0]}\n        angle={Math.PI / 3}\n        penumbra={1}\n        rotation={[45, 0, 0]}\n      />\n    </group>\n  );\n}\n\n function Model(props: any) {\n  const { nodes, materials }: any = useGLTF(\"./components/unityLogo.gltf\");\n  \n  //const [group] = useBox(() => ({ mass: 4, ...props }))\n  const group = useRef();\n  const [hover, setHover] = useState(false);\n  return (\n    <group castShadow ref={group} {...props} dispose={null}>\n      \n      <mesh\n        castShadow\n        onClick={(e) => setHover(!hover)}\n        geometry={nodes.Cube.geometry}\n        material={materials[\"Material.001\"]}\n        position={[0, 0, 0.3]}\n        rotation={[-0.1, -0.8, 0]}\n      />\n      {hover ? <TurnLightsOn color='#FF0000' /> : null}\n    </group>\n  );\n}\n\nfunction Scene() {\n  const viewport = useThree((state) => state.viewport)\n  return (\n    <>\n      <Model position={[0, -viewport.height, 0]} />\n      <Model position={[0, -viewport.height * 2, 0]} />\n    </>\n  )\n}\n\nfunction App() {\n  const scrollRef = useRef(null)\n  const scroll = useRef(0)\n  const doScroll = (e: any) => (scroll.current = e.target.scrollTop / e.target.scrollHeight)\n  return (\n    <>\n\n\n\n      <GridContainer >\n        <GridItem1>\n          <FlexboxContainer>\n            <Wave text=\"Muhammed El-Sayed\" effect=\"verticalFadeIn\" iterations={1} /> \n            <SubText>  Multi-Media Application Developer</SubText>\n          </FlexboxContainer>\n\n        </GridItem1>\n\n        <GridItem2>\n          <Canvas className=\"grid-item2\" onCreated={(state: any) => state.events.connect(scrollRef.current)}>\n            <PerspectiveCamera makeDefault fov={60} position={[0, 15, 20]} rotation={[-0.7, 0, 0]} />\n            <Suspense fallback={<Html><Loader/></Html>}>\n           \n              <ScrollContainer scroll={scroll}>\n            \n                <Model />\n              </ScrollContainer>\n            </Suspense>\n            \n          </Canvas>\n         \n          <Loader/>\n        </GridItem2>\n\n       \n      </GridContainer>\n \n      <div ref={scrollRef} onScroll={doScroll} className=\"scroll\">\n        <div style={{ height: `100vh`, pointerEvents: 'none' }}></div>\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}