{"version":3,"sources":["components/unityLogo.gltf","components/UnityLogo.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TurnLightsOn","ref","useRef","position","angle","Math","PI","penumbra","rotation","Model","props","useGLTF","model","nodes","materials","group","useState","hover","setHover","castShadow","dispose","onPointerOver","e","onPointerOut","geometry","Cube","material","preload","ScrollContainer","scroll","children","viewport","useThree","vec","THREE","useFrame","current","lerp","set","height","Scene","state","App","scrollRef","onCreated","events","connect","PerspectiveCamera","makeDefault","fov","fallback","onScroll","target","scrollTop","scrollHeight","className","style","pointerEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAAe,MAA0B,uC,gBCWzC,SAASA,IACP,IAAMC,EAAMC,mBACZ,OACE,wBAAOD,IAAKA,EAAZ,UACE,2BAAWE,SAAU,CAAC,EAAG,GAAI,GAAIC,MAAOC,KAAKC,GAAK,EAAGC,SAAU,IAC/D,2BACEJ,SAAU,CAAC,EAAG,EAAG,GACjBC,MAAOC,KAAKC,GAAK,EACjBC,SAAU,EACVC,SAAU,CAAC,GAAI,EAAG,KAEpB,2BACEL,SAAU,EAAE,EAAG,EAAG,GAClBC,MAAOC,KAAKC,GAAK,EACjBC,SAAU,EACVC,SAAU,CAAC,GAAI,EAAG,QAMX,SAASC,EAAMC,GAC5B,MAA6BC,YAAQC,GAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAGTC,EAAQb,mBACd,EAA0Bc,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,OACE,gDAAOC,YAAU,EAAClB,IAAKc,GAAWL,GAAlC,IAAyCU,QAAS,KAAlD,UACE,sBACED,YAAU,EACVE,cAAe,SAACC,GAAD,OAAOJ,GAAS,IAC/BK,aAAc,SAACD,GAAD,OAAOJ,GAAS,IAC9BM,SAAUX,EAAMY,KAAKD,SACrBE,SAAUZ,EAAU,gBACpBX,SAAU,CAAC,EAAG,IAAK,IACnBK,SAAU,CAAC,IAAM,GAAK,KAEvBS,EAAQ,cAACjB,EAAD,IAAmB,SAKlCW,IAAQgB,QAAQf,G,YC9ChB,SAASgB,EAAT,GAAqD,IAA1BC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,SACzBC,EAAaC,cAAbD,SACJhB,EAAa,KACjBA,EAAQb,mBACR,IAAM+B,EAAM,IAAIC,UAEhB,OADAC,aAAS,kBAAMpB,EAAMqB,QAAQjC,SAASkC,KAAKJ,EAAIK,IAAI,EAAGP,EAASQ,OAASV,EAAOO,QAAS,GAAI,OACrF,uBAAOnC,IAAKc,EAAZ,SAAoBe,IAmB7B,SAASU,IACP,IAAMT,EAAWC,aAAS,SAACS,GAAD,OAAWA,EAAMV,YAC3C,OACE,qCACE,cAACtB,EAAD,IACA,cAACA,EAAD,CAAQN,SAAU,CAAC,GAAI4B,EAASQ,OAAS,QAmChCG,MA9Bf,WACE,IAAMC,EAAYzC,iBAAO,MACnB2B,EAAS3B,iBAAO,GAEtB,OACE,qCAGI,eAAC,IAAD,CAAQ0C,UAAW,SAACH,GAAD,OAAgBA,EAAMI,OAAOC,QAAQH,EAAUP,UAAlE,UACE,cAACW,EAAA,EAAD,CAAmBC,aAAW,EAACC,IAAK,GAAI9C,SAAU,CAAC,EAAG,GAAI,IAAKK,SAAU,EAAE,GAAK,EAAG,KACnF,cAAC,WAAD,CAAU0C,SAAU,KAApB,SACE,cAACtB,EAAD,CAAkBC,OAAQA,EAA1B,SACE,cAACW,EAAD,WAUN,qBAAKvC,IAAK0C,EAAWQ,SAnBV,SAAC7B,GAAD,OAAaO,EAAOO,QAAUd,EAAE8B,OAAOC,UAAY/B,EAAE8B,OAAOE,cAmB9BC,UAAU,SAAnD,SACA,qBAAKC,MAAO,CAAEjB,OAAO,QAAUkB,cAAe,gBCpDvCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c80c762a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/unityLogo.ce3ee7a0.gltf\";","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport model from \"./unityLogo.gltf\";\nimport styled from \"styled-components\";\n\nimport { useGLTF } from \"@react-three/drei\";\n\nfunction TurnLightsOn() {\n  const ref = useRef();\n  return (\n    <group ref={ref}>\n      <spotLight position={[0, 15, 0]} angle={Math.PI / 3} penumbra={1} />\n      <spotLight\n        position={[4, 0, 0]}\n        angle={Math.PI / 3}\n        penumbra={1}\n        rotation={[45, 0, 0]}\n      />\n      <spotLight\n        position={[-4, 0, 0]}\n        angle={Math.PI / 3}\n        penumbra={1}\n        rotation={[45, 0, 0]}\n      />\n    </group>\n  );\n}\n\nexport default function Model(props) {\n  const { nodes, materials } = useGLTF(model);\n\n  //const [group] = useBox(() => ({ mass: 4, ...props }))\n  const group = useRef();\n  const [hover, setHover] = useState(false);\n  return (\n    <group castShadow ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        onPointerOver={(e) => setHover(true)}\n        onPointerOut={(e) => setHover(false)}\n        geometry={nodes.Cube.geometry}\n        material={materials[\"Material.001\"]}\n        position={[0, 1.3, 0.3]}\n        rotation={[0.2, -0.8, 0]}\n      />\n      {hover ? <TurnLightsOn /> : null}\n    </group>\n  );\n}\n\nuseGLTF.preload(model);\n","import React, { Suspense, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, MeshProps, useFrame, useThree, } from \"@react-three/fiber\";\nimport \"./App.css\";\nimport Model from \"./components/UnityLogo.js\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\n\n\nfunction ScrollContainer({ scroll, children }: any) {\n  const { viewport } = useThree();\n  let group: any = null;\n  group = useRef();\n  const vec = new THREE.Vector3();\n  useFrame(() => group.current.position.lerp(vec.set(0, viewport.height * scroll.current, 0), 0.1))\n  return <group ref={group}>{children}</group>\n}\n\n\nfunction Plane(props: MeshProps) {\n  const ref = useRef();\n  const [hover, setHover] = useState(false)\n\n  return (\n    <mesh ref={ref} receiveShadow rotation={[-90, 0, 0]} position={[0, -3, 0]}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n\n      <planeBufferGeometry attach=\"geometry\" args={[50, 50]} />\n      <meshStandardMaterial attach=\"material\" color='#a9a9a9' />\n\n    </mesh>\n  )\n}\nfunction Scene() {\n  const viewport = useThree((state) => state.viewport)\n  return (\n    <>\n      <Model  />\n      <Model  position={[0, -viewport.height , 0]} />\n    </>\n  )\n}\n//camera={{ position: [0, 2, 10], fov: 60 }}\nfunction App() {\n  const scrollRef = useRef(null)\n  const scroll = useRef(0)\n  const doScroll = (e: any) => (scroll.current = e.target.scrollTop / e.target.scrollHeight)\n  return (\n    <>\n\n\n        <Canvas onCreated={(state: any) => state.events.connect(scrollRef.current)}>\n          <PerspectiveCamera makeDefault fov={60} position={[0, 15, 20]} rotation={[-0.7, 0, 0]} />\n          <Suspense fallback={null}>\n            <ScrollContainer  scroll={scroll}>\n              <Scene/>\n            </ScrollContainer>\n\n\n\n          </Suspense>\n\n\n\n        </Canvas>\n        <div ref={scrollRef} onScroll={doScroll} className=\"scroll\">\n        <div style={{ height: `200vh`, pointerEvents: 'none' }}></div>\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}