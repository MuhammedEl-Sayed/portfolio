{"version":3,"sources":["UnityLogo.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TurnLightsOn","ref","useRef","position","angle","Math","PI","penumbra","rotation","Model","props","useGLTF","process","nodes","materials","useState","hover","setHover","group","castShadow","dispose","onPointerOver","e","onPointerOut","geometry","Cube","material","preload","Plane","receiveShadow","attach","args","color","App","PerspectiveCamera","makeDefault","fov","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPASA,SAASA,IACP,IAAMC,EAAMC,mBACZ,OACE,wBAAOD,IAAOA,EAAd,UACA,2BAAWE,SAAU,CAAC,EAAG,GAAI,GAAIC,MAAOC,KAAKC,GAAG,EAAGC,SAAU,IAC7D,2BAAYJ,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAOC,KAAKC,GAAG,EAAGC,SAAU,EAAGC,SAAY,CAAC,GAAG,EAAE,KAClF,2BAAYL,SAAU,EAAE,EAAG,EAAG,GAAIC,MAAOC,KAAKC,GAAG,EAAGC,SAAU,EAAGC,SAAY,CAAC,GAAG,EAAE,QAIxE,SAASC,EAAMC,GAG5B,MAA6BC,YAAQC,6BAA7BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UACf,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAGMC,EAAQhB,mBAEd,OACE,gDAAQiB,YAAU,EAAClB,IAAKiB,GAAWR,GAAnC,IAA0CU,QAAS,KACnDC,cAAe,SAACC,GAAD,OAAOL,GAAS,IAC/BM,aAAc,SAACD,GAAD,OAAOL,GAAS,IAF9B,UAIE,sBAAOE,YAAU,EAACK,SAAUX,EAAMY,KAAKD,SAAUE,SAAUZ,EAAU,gBAAiBX,SAAU,CAAC,EAAG,IAAK,IAAMK,SAAY,CAAC,IAAK,GAAI,KACpIQ,EAAQ,cAAChB,EAAD,IAAkB,SAKjCW,IAAQgB,QAAQ,mB,YChChB,SAASC,EAAMlB,GACb,IAAMT,EAAMC,mBACZ,EAA4Ba,oBAAS,GAArC,6BAEA,OACE,uBAAMd,IAAKA,EAAK4B,eAAa,EAACrB,SAAY,EAAE,GAAG,EAAE,GAAIL,SAAY,CAAC,GAAG,EAAE,GAAvE,UAEE,qCAAqB2B,OAAO,WAAWC,KAAM,CAAC,GAAI,MAClD,sCAAsBD,OAAO,WAAWE,MAAM,eA2BrCC,MArBf,WACE,OACE,mCACE,eAAC,IAAD,WACD,cAACC,EAAA,EAAD,CAAmBC,aAAW,EAACC,IAAM,GAAIjC,SAAU,CAAC,EAAE,GAAG,IAAKK,SAAY,EAAE,GAAI,EAAE,KAI/E,eAAC,WAAD,CAAU6B,SAAU,KAApB,UACE,cAACT,EAAD,IAEA,cAACnB,EAAD,aClBK6B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a35abb3.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useState} from 'react';\nimport * as THREE from \"three\";\n\nimport { useGLTF } from '@react-three/drei';\n\nfunction TurnLightsOn(){\n  const ref = useRef();\n  return(\n    <group ref = {ref}>\n    <spotLight position={[0, 15, 0]} angle={Math.PI/3} penumbra={1}/>\n    <spotLight  position={[4, 0, 0]} angle={Math.PI/3} penumbra={1} rotation = {[45,0,0]} />\n    <spotLight  position={[-4, 0, 0]} angle={Math.PI/3} penumbra={1} rotation = {[45,0,0]} />\n    </group>\n  )\n}\nexport default function Model(props) {\n\n\n  const { nodes, materials } = useGLTF(process.env.PUBLIC_URL + '/unityLogo.gltf')\n  const [hover, setHover] = useState(false)\n\n  //const [group] = useBox(() => ({ mass: 4, ...props }))\n  const group = useRef();\n\n  return (\n    <group  castShadow ref={group} {...props} dispose={null}\n    onPointerOver={(e) => setHover(true)}\n    onPointerOut={(e) => setHover(false)}\n      >\n      <mesh  castShadow geometry={nodes.Cube.geometry} material={materials['Material.001']} position={[0, 1.3, 0.3]} rotation = {[0.2,-0.8,0]} />\n      {hover ? <TurnLightsOn/> : null}\n    </group>\n  )\n}\n\nuseGLTF.preload('/unityLogo.gltf')\n","import React, { Suspense, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, MeshProps, useFrame,  } from \"@react-three/fiber\";\nimport \"./App.css\";\nimport Model from \"./UnityLogo.js\";\nimport { OrbitControls, PerspectiveCamera } from \"@react-three/drei\";\n\nfunction Plane(props: MeshProps) {\n  const ref = useRef();\n  const [hovered, setHover] = useState(false)\n\n  return (\n    <mesh ref={ref} receiveShadow rotation = {[-90,0,0]} position = {[0,-3,0]}>\n    \n      <planeBufferGeometry attach=\"geometry\" args={[50, 50]}  />\n      <meshStandardMaterial attach=\"material\" color='#a9a9a9'  />\n    </mesh>\n  )\n}\n\n//camera={{ position: [0, 2, 10], fov: 60 }}\nfunction App() {\n  return (\n    <>\n      <Canvas >\n     <PerspectiveCamera makeDefault fov= {60} position={[0,15,20]} rotation = {[-0.7,0,0]}/>\n      {/*<ambientLight intensity={0.5} /> <spotLight position={[-10, 30, 0]} angle={Math.PI/3} penumbra={1} />\n      <pointLight position={[-10, -10, -10]} />*/}\n   \n        <Suspense fallback={null}>\n          <Plane />\n          \n          <Model />\n        </Suspense>\n\n\n  \n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}